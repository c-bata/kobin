# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Masashi Shibata
# This file is distributed under the same license as the kobin package.
# Masashi Shibata <contact@c-bata.link>, 2016.
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: kobin 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-06 18:26+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/tutorial.rst:3
msgid "Tutorial"
msgstr "チュートリアル"

#: ../../source/tutorial.rst:6
msgid "Installation"
msgstr "インストール"

#: ../../source/tutorial.rst:8
msgid "In this tutorial, we will use Python 3.6."
msgstr "このチュートリアルでは、Python3.6を使用します。"

#: ../../source/tutorial.rst:17
msgid "Kobin: WSGI Framework"
msgstr ""

#: ../../source/tutorial.rst:18
msgid "WSGICLI: Command line tools for developing your WSGI Application"
msgstr ""

#: ../../source/tutorial.rst:19
msgid "Jinja2: Template Engine"
msgstr ""

#: ../../source/tutorial.rst:23
msgid "Your first kobin app"
msgstr "初めてのKobinアプリケーション"

#: ../../source/tutorial.rst:25
msgid "Let's make Kobin's application. Please create a ``main.py``:"
msgstr "ここからは、実際にKobinのアプリケーションをつくってみます。 ``main.py`` を作成してください。"

#: ../../source/tutorial.rst:43
msgid ""
"For those who have used the WSGI framework such as Bottle and Flask, it "
"may be familiar with this code. One distinctive feature is the existence "
"of type hints. Kobin casts the URL variable based on the type hinting and"
" passes it to the View function."
msgstr ""
"BottleやFlaskなどのWSGIフレームワークを使用したことのある方にとっては、馴染みのあるものかもしれません。"
"一つ特徴的なのは、型ヒントの存在でしょうか。"
"Kobinでは、引数の型ヒントを元にURL変数をキャストし、View関数に渡します。"

#: ../../source/tutorial.rst:48
msgid ""
"Let's actually move it. There are several ways to run WSGI's application."
" In the development environment we recommend a command line tool called "
"``wsgicli``."
msgstr ""
"それでは実際に動かしてみましょう。"
"WSGIのアプリケーションを動かす方法はいくつかありますが、"
"開発環境では ``wsgicli`` というコマンドラインツールを推奨しています。"

#: ../../source/tutorial.rst:57
msgid "When the server starts up successfully, let's access following urls."
msgstr "サーバが無事に起動したら、実際にアクセスしてみましょう。"

#: ../../source/tutorial.rst:59
msgid "http://localhost:8000/"
msgstr ""

#: ../../source/tutorial.rst:60
msgid "http://localhost:8000/users/1"
msgstr ""

#: ../../source/tutorial.rst:62
msgid "Did you see any message? Congratulations!"
msgstr "何かメッセージが表示されましたか？おめでとうございます。"

#: ../../source/tutorial.rst:66
msgid "Deploy to production"
msgstr "本番環境へのデプロイ"

#: ../../source/tutorial.rst:68
msgid ""
"In a production, let's use ``gunicorn`` instead of using ``wsgicli`` for "
"a performance reasons."
msgstr "本番環境では、パフォーマンスの観点からこれまで使用してきた ``wsgicli`` ではなく ``gunicorn`` を使いましょう。"

#: ../../source/tutorial.rst:75
msgid ""
"Then please try accessing your website. If you use the function of static"
" file serving in wsgicli, maybe the layout and styles have gone wrong. "
"Actually, gunicorn doesn't have the function of serving static content "
"such as CSS, JS, and image files. Generally, the reverse proxy server "
"such as Nginx is used for serving static content in production (See "
"`Serving Static Content - Nginx <https://www.nginx.com/resources/admin-"
"guide/serving-static-content/>`_ ."
msgstr ""
"それではアクセスしてみてください。大変です、表示がおかしくなってしまいました。"
"実は、gunicornにはCSSやJS、画像ファイルといった静的コンテンツを配信する機能はありません。"
"本番環境では、Nginx等のリバースプロキシを用いて静的コンテンツを配信することが一般的です"
"(参考: `Serving Static Content - Nginx <https://www.nginx.com/resources/admin-guide/serving-static-content/>`_ )"

#: ../../source/tutorial.rst:81
msgid ""
"If you absolutely need to serve static contents in Python's application "
"side (ex: Using Heroku), Please use `kobinpy/wsgi-static-middleware "
"<https://github.com/kobinpy/wsgi-static-middleware>`_ ."
msgstr ""
"もし、HerokuなどどうしてもPythonのアプリケーション側で静的ファイルを配信する必要がある場合は、"
"`kobinpy/wsgi-static-middleware <https://github.com/kobinpy/wsgi-static-middleware>`_ を利用してください。"

#: ../../source/tutorial.rst:86
msgid "Conclusion"
msgstr "おわりに"

#: ../../source/tutorial.rst:88
msgid ""
"More practical example is `kobin-example <https://github.com/kobinpy"
"/kobin-example>`_ . Please see it."
msgstr "より実践的なアプリケーションとして、 `kobin-example <https://github.com/kobinpy/kobin-example>`_ があります。"
"ぜひご覧ください。"
